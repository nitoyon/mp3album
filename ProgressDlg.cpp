
// ProgressDlg.cpp
//============================================================================//
// 更新：02/12/15(日)
// 概要：なし。
// 補足：なし。
//============================================================================//

#include "ProgressDlg.h"
#include "Zip.h"
#include "resource.h"
#include <process.h>


/******************************************************************************/
//		コンストラクタおよびデストラクタ
/******************************************************************************/
// コンストラクタ
//============================================================================//
// 更新：02/12/12(木)
// 概要：なし。
// 補足：なし。
//============================================================================//

ProgressDlg::ProgressDlg( vector<Mp3File*>* p, const string& s)
: pvecFile( p), strArchivePath( s)
{
}


/******************************************************************************/
// デストラクタ
//============================================================================//
// 更新：02/12/12(木)
// 概要：なし。
// 補足：なし。
//============================================================================//

ProgressDlg::~ProgressDlg() 
{
}



/******************************************************************************/
//		メッセージハンドラ
/******************************************************************************/
// メッセージマップ定義
//============================================================================//
// 更新：02/12/12(木)
// 概要：なし。
// 補足：なし。
//============================================================================//

BEGIN_DLG_MESSAGE_MAP( ProgressDlgProc, ProgressDlg)
	ON_MESSAGE( WM_INITDIALOG	, OnInitDialog)
	BEGIN_COMMAND_MAP()
		ON_COMMAND( IDCANCEL		, OnCancel)
	END_COMMAND_MAP()
END_DLG_MESSAGE_MAP()


/******************************************************************************/
// 初期化
//============================================================================//
// 更新：02/12/15(日)
// 概要：なし。
// 補足：なし。
//============================================================================//

BOOL ProgressDlg::OnInitDialog( HWND hDlg, WPARAM wParam, LPARAM lParam) 
{
	hwndArchiveProgress = GetDlgItem( hDlg, IDC_ARCHIVEPROGRESS) ;
	hwndFileProgress = GetDlgItem( hDlg, IDC_FILEPROGRESS) ;

	// パスが長いときに途中をカット
	HWND h = GetDlgItem( hDlg, IDC_ARCHIVENAME) ;
	SetWindowLong( h, GWL_STYLE, GetWindowLong( h, GWL_STYLE) | SS_PATHELLIPSIS) ;
	h = GetDlgItem( hDlg, IDC_FILENAME) ;
	SetWindowLong( h, GWL_STYLE, GetWindowLong( h, GWL_STYLE) | SS_PATHELLIPSIS) ;

	SetDlgItemText( hDlg, IDC_ARCHIVENAME, strArchivePath.c_str()) ;

	if( _beginthread( fire, 0, (void*)this) != -1)
	{
		state = ZIPPING ;
	}
	else
	{
		state = NOTHREAD ;
		strLog = "zip 圧縮用のスレッドを作成できませんでした。" ;
	}

	return TRUE ;
}


/******************************************************************************/
// 中断
//============================================================================//
// 更新：02/12/15(日)
// 概要：なし。
// 補足：なし。
//============================================================================//

BOOL ProgressDlg::OnCancel( HWND hDlg, WPARAM, LPARAM) 
{
	state = CANCELED ;

	return TRUE ;
}


/******************************************************************************/
// 終了通知
//============================================================================//
// 更新：02/12/15(日)
// 概要：なし。
// 補足：なし。
//============================================================================//

BOOL ProgressDlg::OnZipFinish()
{
	EndDialog( m_hWnd, state == SUCCESS) ;
	return TRUE ;
}


/******************************************************************************/
//		設定
/******************************************************************************/
// ファイル名設定
//============================================================================//
// 更新：02/12/12(木)
// 概要：なし。
// 補足：なし。
//============================================================================//

void ProgressDlg::SetFileName( const string& s)
{
	SetDlgItemText( m_hWnd, IDC_FILENAME, s.c_str()) ;
}


/******************************************************************************/
// プログレスの範囲
//============================================================================//
// 更新：02/12/12(木)
// 概要：なし。
// 補足：なし。
//============================================================================//

void ProgressDlg::SetProgressRange( int i, ULONG ul)
{
	if( i == 0)
	{
		SendMessage( hwndArchiveProgress, PBM_SETRANGE32, 0, ul) ;
	}
	else
	{
		SendMessage( hwndFileProgress, PBM_SETRANGE32, 0, ul) ;
	}
}


/******************************************************************************/
// プログレスの場所
//============================================================================//
// 更新：02/12/12(木)
// 概要：なし。
// 補足：なし。
//============================================================================//

void ProgressDlg::SetProgressPos( int i, ULONG j)
{
	if( i == 0)
	{
		SendMessage( hwndArchiveProgress, PBM_SETPOS, j, 0) ;
	}
	else
	{
		SendMessage( hwndFileProgress, PBM_SETPOS, j, 0) ;
	}
}


/******************************************************************************/
// 状態変更
//============================================================================//
// 更新：02/12/15(日)
// 概要：なし。
// 補足：なし。
//============================================================================//

void ProgressDlg::SetState( State s)
{
	state = s ;
}
